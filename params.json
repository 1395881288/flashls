{"name":"Flashls","tagline":"HLS Flash Plugin/Player (Chromeless,OSMF,FlowPlayer)","body":"# flashls\r\n\r\nAn Open-source HLS Flash plugin that allows you to play HLS streams.\r\n\r\nThe plugin is compatible with the following players:\r\n\r\n  - [Flowplayer](#flowplayer) 3.2.12\r\n  - [OSMF 2.0](#strobe-media-playback-smp-and-other-osmf-based-players) based players (such as SMP and GrindPlayer)\r\n  - video.js\r\n  - MediaElement.js\r\n\r\n## Features\r\n\r\n  - VoD & Live playlists\r\n    - Sliding window (aka DVR) support on Live playlists\r\n  - Adaptive streaming\r\n    - Manual & Auto switching\r\n    - Serial segment fetching method from http://www.cs.tut.fi/~moncef/publications/rate-adaptation-IC-2011.pdf\r\n  - Configurable seeking method on VoD & Live\r\n    - Accurate seeking to exact requested position\r\n    - Key frame based seeking (nearest key frame)\r\n    - Segment based seeking (beginning of segment)\r\n  - AES-128 decryption \r\n  - Buffer progress report\r\n  - Error resilience\r\n    - Retry mechanism on I/O errors \r\n    - Recovery mechanism on badly segmented TS streams\r\n\r\n### Supported M3U8 tags\r\n\r\n  - `#EXTM3U`\r\n  - `#EXTINF`\r\n  - `#EXT-X-STREAM-INF` (Multiple bitrate)\r\n  - `#EXT-X-ENDLIST` (VoD / Live playlist)\r\n  - `#EXT-X-MEDIA-SEQUENCE`\r\n  - `#EXT-X-TARGETDURATION`\r\n  - `#EXT-X-DISCONTINUITY`\r\n  - `#EXT-X-DISCONTINUITY-SEQUENCE`\r\n  - `#EXT-X-PROGRAM-DATE-TIME` (optional, used to synchronize time-stamps and sequence number when switching from one level to another)\r\n  - `#EXT-X-KEY` (AES-128 method supported only)\r\n  - `#EXT-X-BYTERANGE`\r\n\r\n## Configuration\r\n\r\nThe plugin accepts several **optional** configuration options, such as:\r\n\r\n  - `hls_debug` (default false) - Toggle _debug_ traces, outputted on JS console\r\n  - `hls_debug2` (default false) - Toggle _verbose debug_ traces, outputted on JS console\r\n  - `hls_minbufferlength` (default -1) - Minimum buffer length in _seconds_ that needs to be reached before playback can start (after seeking) or restart (in case of empty buffer)\r\n    - If set to `-1` some heuristics based on past metrics are used to define an accurate value that should prevent buffer to stall\r\n  - `hls_lowbufferlength` (default 3) - Low buffer threshold in _seconds_. When crossing down this threshold, HLS will switch to buffering state, usually the player will report this buffering state through a rotating icon. Playback will still continue.\r\n  - `hls_maxbufferlength` (default 60) - Maximum buffer length in _seconds_ (0 means infinite buffering)\r\n  - `hls_startfromlevel` (default -1) \r\n   - from 0 to 1 : indicates the \"normalized\" preferred bitrate. As such,\r\n     - if 0, lowest non-audio bitrate is used,\r\n     - if 1, highest bitrate is used,\r\n     - if 0.5, the closest to the middle bitrate will be selected and used first.\r\n   - -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)\r\n  - `hls_seekfromlevel` (default -1) - If set to true, playback will start from lowest non-audio level after any seek operation. If set to false, playback will start from level used before seeking\r\n   - from 0 to 1 : indicates the \"normalized\" preferred bitrate. As such,\r\n     - if 0, lowest non-audio bitrate is used,\r\n     - if 1, highest bitrate is used,\r\n     - if 0.5, the closest to the middle bitrate will be selected and used first.\r\n   - -1 : automatic seek level selection, keep level before seek.   \r\n  - `hls_live_flushurlcache` (default false) - If set to true, Live playlist will be flushed from URL cache before reloading (this is to workaround some cache issues with some combination of Flash Player / IE version)\r\n  - `hls_seekmode`\r\n    - \"ACCURATE\" - Seek to exact position\r\n    - \"KEYFRAME\" - Seek to last keyframe before requested position\r\n    - \"SEGMENT\" - Seek to beginning of segment containing requested position\r\n  - `hls_manifestloadmaxretry` (default -1): max number of Manifest load retries after I/O Error.\r\n    - if any I/O error is met during initial Manifest load, it will not be reloaded. an HLSError will be triggered immediately.\r\n    - After initial load, any I/O error will trigger retries every 1s,2s,4s,8s (exponential, capped to 64s).  please note specific handling for these 2 values :\r\n        - 0, means no retry, error message will be triggered automatically\r\n        - -1 means infinite retry\r\n  - `hls_fragmentloadmaxretry` (default -1): max number of Fragment load retries after I/O Error.\r\n      * any I/O error will trigger retries every 1s,2s,4s,8s (exponential, capped to 64s).  please note specific handling for these 2 values :\r\n          * 0, means no retry, error message will be triggered automatically\r\n          * -1 means infinite retry      \r\n  - `hls_capleveltostage` (default false) : limit levels usable in auto-quality by the stage dimensions (width and height)\r\n    - true : level width and height (defined in m3u8 playlist) will be compared with the player width and height (stage.stageWidth and stage.stageHeight). Max level will be set depending on the `hls_maxlevelcappingmode` option. Note: this setting is ignored in manual mode so all the levels could be selected manually.\r\n    - false : levels will not be limited. All available levels could be used in auto-quality mode taking only bandwidth into consideration.\r\n  - `hls_maxlevelcappingmode` (default downscale) : defines the max level capping mode to the one available in HLSMaxLevelCappingMode:\r\n    - \"downscale\" - max capped level should be the one with the dimensions equal or greater than the stage dimensions (so the video will be downscaled)\r\n    - \"upscale\" - max capped level should be the one with the dimensions equal or lower than the stage dimensions (so the video will be upscaled)\r\n \r\n\r\n\r\n## Examples :\r\n\r\n* http://www.flashls.org/latest/examples/chromeless\r\n* http://www.flashls.org/latest/examples/osmf/GrindPlayer.html\r\n* http://www.flashls.org/latest/examples/osmf/StrobeMediaPlayback.html\r\n* http://www.flashls.org/latest/examples/flowplayer/index.html\r\n* http://www.flashls.org/mediaelement/demo/mediaelementplayer-hls.html\r\n* http://www.flashls.org/videojs/flash_demo.html\r\n\r\n\r\n\r\n## Usage\r\n\r\n  - Download flashls from https://github.com/mangui/flashls/releases\r\n  - Unzip, extract and upload the appropiate version to your server\r\n  - In the `examples` directory you will find examples for ChromelessPlayer, Flowplayer, Strobe Media Playback (SMP) and GrindPlayer\r\n\r\n### Setup\r\n---\r\n\r\n\r\n#### Flowplayer\r\n\r\n```javascript\r\nflowplayer(\"player\", 'http://releases.flowplayer.org/swf/flowplayer-3.2.12.swf', {\r\n  // Flowplayer configuration options\r\n  // ...\r\n  plugins: {\r\n    httpstreaming: {\r\n      // HLSProvider configuration options\r\n      url: 'HLSProviderFlowPlayer.swf',\r\n      hls_debug: false,\r\n      hls_debug2: false,\r\n      hls_lowbufferlength: 3,\r\n      hls_minbufferlength: 8,\r\n      hls_maxbufferlength: 60,\r\n      hls_startfromlowestlevel: false,\r\n      hls_seekfromlowestlevel: false,\r\n      hls_live_flushurlcache: false,\r\n      hls_seekmode: 'ACCURATE',\r\n      hls_capleveltostage: false,\r\n      hls_maxlevelcappingmode: 'downscale'\r\n    }\r\n  }\r\n});\r\n```\r\n---\r\n\r\n#### Strobe Media Playback (SMP) and other OSMF based players\r\n\r\n```javascript\r\nvar playerOptions = {\r\n  // Strobe Media Playback configuration options\r\n  // ...\r\n  source: 'http://example.com/stream.m3u8',\r\n  // HLSProvider configuration options\r\n  plugin_hls: \"HLSProvider.swf\",\r\n  hls_debug: false,\r\n  hls_debug2: false,\r\n  hls_minbufferlength: -1,\r\n  hls_lowbufferlength: 2,\r\n  hls_maxbufferlength: 60,\r\n  hls_startfromlowestlevel: false,\r\n  hls_seekfromlowestlevel: false,\r\n  hls_live_flushurlcache: false,\r\n  hls_seekmode: 'ACCURATE',\r\n  hls_capleveltostage: false,\r\n  hls_maxlevelcappingmode: 'downscale'\r\n};\r\n\r\nswfobject.embedSWF('StrobeMediaPlayback.swf', 'player', 640, 360, '10.2', null, playerOptions, {\r\n  allowFullScreen: true,\r\n  allowScriptAccess: 'always',\r\n  bgColor: '#000000',\r\n  wmode: 'opaque'\r\n}, {\r\n  name: 'player'\r\n});\r\n```\r\n\r\n## License\r\n\r\n  - [MPL 2.0](https://github.com/mangui/flashls/LICENSE)\r\n  - [as3crypto.swc](https://github.com/timkurvers/as3-crypto) is governed by a `BSD` license\r\n\r\n## Donation\r\n\r\nIf you'd like to support future development and new product features, please make a donation via PayPal. These donations are used to cover my ongoing expenses - web hosting, domain registrations, and software and hardware purchases.\r\n\r\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=463RB2ALVXJLA)\r\n\r\n---\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mangui/flashls/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}